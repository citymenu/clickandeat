<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:mongo="http://www.springframework.org/schema/data/mongo"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation=
               "http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context-3.0.xsd
          http://www.springframework.org/schema/security
          http://www.springframework.org/schema/security/spring-security-3.0.3.xsd
          http://www.springframework.org/schema/data/mongo
          http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
          http://www.springframework.org/schema/task
          http://www.springframework.org/schema/task/spring-task-3.0.xsd
          http://www.springframework.org/schema/util
          http://www.springframework.org/schema/util/spring-util-3.0.xsd
          http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<!-- Placeholder for annotated configuration classes -->
	<context:property-placeholder location="classpath:/clickandeat.properties" system-properties-mode="OVERRIDE"/>

	<!-- Read annotation based configuration classes -->
	<context:component-scan base-package="com.ezar"/>

	<!-- Enable annotation-based method security -->
	<security:global-method-security secured-annotations="enabled" />

    <!-- Enable annotation-based task scheduling -->
    <task:scheduler id="scheduler" pool-size="1"/>
    <task:annotation-driven scheduler="scheduler"/>

	<!-- Disable HTTP request caching -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="cacheSeconds" value="0" />
    </bean>

	<!--  HTTP security config -->
	<security:http disable-url-rewriting="true" security-context-repository-ref="simpleSecurityContextRepository" create-session="always">
		<security:intercept-url pattern="/index.jsp" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
    	<security:intercept-url pattern="/secure/login.html*" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:intercept-url pattern="/secure/register.html*" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:intercept-url pattern="/secure/doRegister.html*" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
    	<security:intercept-url pattern="/secure/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:intercept-url pattern="*.html" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:intercept-url pattern="/**" filters="none"/>

    	<security:form-login login-page="/secure/login.html"
    						 login-processing-url="/secure/j_security_check"
    						 default-target-url="/home.html"
    						 always-use-default-target="true"
    						 authentication-failure-url="/secure/login.html?error=true"/>
		<security:logout logout-url="/j_security_logout"
                         success-handler-ref="securityLogoutSuccessHandler"/>
  	</security:http>

    <!-- Simple security context repository -->
    <bean id="simpleSecurityContextRepository" class="com.ezar.clickandeat.web.security.SimpleSecurityContextRepository"/>

    <!-- Security logout success handler -->
    <bean id="securityLogoutSuccessHandler" class="com.ezar.clickandeat.web.security.SecurityLogoutSuccessHandler"/>

    <!-- Password salt source -->
    <bean id="saltSource" class="org.springframework.security.authentication.dao.ReflectionSaltSource">
        <property name="userPropertyToUse" value="salt"/>
    </bean>

    <!-- Password encoder -->
    <bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
        <constructor-arg value="256"/>
    </bean>

  	<!-- Authentication manager -->
  	<security:authentication-manager>
  		<security:authentication-provider user-service-ref="userService">
              <security:password-encoder ref="passwordEncoder">
                  <security:salt-source ref="saltSource"/>
              </security:password-encoder>
        </security:authentication-provider>
	</security:authentication-manager>

	<!-- Load the MONGO HQ url -->
	<bean class="java.net.URI" id="dbUrl">
    	<constructor-arg value="${MONGOHQ_URL}"/>
	</bean>

	<!-- Default bean name is 'mongo' -->
  	<mongo:mongo host="#{@dbUrl.getHost()}" port="#{@dbUrl.getPort()}"/>

	<!-- Mongo db factory -->
  	<mongo:db-factory dbname="#{@dbUrl.getPath().substring(1)}" mongo-ref="mongo" username="#{@dbUrl.getUserInfo().split(':')[0]}" password="#{@dbUrl.getUserInfo().split(':')[1]}"/>

	<!-- set the mapping converter to be used by the MongoTemplate -->
  	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
    	<constructor-arg name="mongoDbFactory" ref="mongoDbFactory"/>
        <constructor-arg name="mongoConverter" ref="mappingConverter"/>
    	<property name="writeResultChecking" value="EXCEPTION"/>
		<property name="writeConcern" value="FSYNC_SAFE"/>
  	</bean>

    <!-- Mongo read/write converters -->
    <bean id="localDateReadConverter" class="com.ezar.clickandeat.converter.LocalDateReadConverter"/>
    <bean id="localDateWriteConverter" class="com.ezar.clickandeat.converter.LocalDateWriteConverter"/>
    <bean id="localTimeReadConverter" class="com.ezar.clickandeat.converter.LocalTimeReadConverter"/>
    <bean id="localTimeWriteConverter" class="com.ezar.clickandeat.converter.LocalTimeWriteConverter"/>
    <bean id="dateTimeReadConverter" class="com.ezar.clickandeat.converter.DateTimeReadConverter"/>
    <bean id="dateTimeWriteConverter" class="com.ezar.clickandeat.converter.DateTimeWriteConverter"/>

    <mongo:mapping-converter id="mappingConverter">
        <mongo:custom-converters>
            <mongo:converter ref="localDateReadConverter" />
            <mongo:converter ref="localDateWriteConverter" />
            <mongo:converter ref="localTimeReadConverter" />
            <mongo:converter ref="localTimeWriteConverter" />
            <mongo:converter ref="dateTimeReadConverter" />
            <mongo:converter ref="dateTimeWriteConverter" />
        </mongo:custom-converters>
    </mongo:mapping-converter>

    <!-- Proxy mongo repositories -->
    <mongo:repositories base-package="com.ezar.clickandeat.repository" />

    <!-- Message resolver -->
    <bean id="messageResolver" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="messages"/>
    </bean>
    
    <!-- Load the REDISTOGO HQ url -->
    <bean class="java.net.URI" id="redisUrl">
        <constructor-arg value="${REDISTOGO_URL}"/>
    </bean>

    <!-- Jedis connection factory -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="#{@redisUrl.getHost()}"/>
        <property name="port" value="#{@redisUrl.getPort()}"/>
        <property name="password" value="#{@redisUrl.getUserInfo().split(':')[1]}"/>
        <property name="usePool" value="false"/>
    </bean>

    <!-- Redis default template -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
    </bean>

    <!-- Redis string template -->
    <bean id="redisStringTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
    </bean>

    <!-- SMTP mail sender -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${smtp.host}"/>
        <property name="username" value="${smtp.username}"/>
        <property name="password" value="${smtp.password}"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">true</prop>
            </props>
        </property>
    </bean>

</beans>
